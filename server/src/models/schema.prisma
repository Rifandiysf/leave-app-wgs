generator client {
  provider = "prisma-client-js"
  output   = "../../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model tb_balance {
  id_balance            String                  @id @default(uuid()) @db.VarChar(50)
  amount                Int                     @db.SmallInt
  receive_date          DateTime                @db.Date
  expired_date          DateTime                @db.Date
  NIK                   String                  @db.VarChar(16)
  tb_users              tb_users                @relation(fields: [NIK], references: [NIK], onDelete: NoAction, onUpdate: NoAction, map: "NIK")
  created_at            DateTime                @default(now()) @db.Timestamptz(0)
  tb_balance_adjustment tb_balance_adjustment[]
}

model tb_leave {
  id_leave           String              @id @default(uuid()) @db.VarChar(50)
  title              String              @db.VarChar(255)
  leave_type         leave_type
  start_date         DateTime            @db.Date
  end_date           DateTime            @db.Date
  total_days         Int                 @db.SmallInt
  reason             String
  status             status              @default(pending)
  created_at         DateTime            @default(now()) @db.Timestamptz(0)
  NIK                String              @db.VarChar(50)
  id_special         String?             @db.VarChar(50)
  id_mandatory       String?             @db.VarChar(50)
  tb_users           tb_users            @relation(fields: [NIK], references: [NIK], onDelete: NoAction, onUpdate: NoAction, map: "NIK")
  tb_mandatory_leave tb_mandatory_leave? @relation(fields: [id_mandatory], references: [id_mandatory], onDelete: NoAction, onUpdate: NoAction, map: "id_mandatory")
  tb_special_leave   tb_special_leave?   @relation(fields: [id_special], references: [id_special], onDelete: NoAction, onUpdate: NoAction, map: "id_special")
  tb_leave_log       tb_leave_log[]
}

model tb_mandatory_leave {
  id_mandatory String     @id @default(uuid()) @db.VarChar(50)
  title        String     @db.VarChar(255)
  is_active    Boolean    @default(true)
  description  String
  start_date   DateTime   @default(dbgenerated("(CURRENT_DATE + '14 days'::interval)")) @db.Date
  end_date     DateTime   @default(dbgenerated("(CURRENT_DATE + '16 days'::interval)")) @db.Date
  created_at   DateTime   @default(now()) @db.Timestamptz(0)
  tb_leave     tb_leave[]
}

model tb_special_leave {
  id_special        String            @id @default(uuid()) @db.VarChar(50)
  title             String            @db.VarChar(255)
  applicable_gender applicable_gender
  duration          Int               @db.SmallInt
  is_active         Boolean           @default(true)
  description       String
  created_at        DateTime          @default(now()) @db.Timestamptz(0)
  tb_leave          tb_leave[]
}

model tb_users {
  NIK                   String                  @id(map: "tb_user_pkey") @db.VarChar(16)
  fullname              String                  @db.VarChar(50)
  email                 String                  @unique @db.VarChar(50)
  password              String                  @db.VarChar(20)
  gender                gender
  role                  role
  status_active         status_active           @default(active)
  join_date             DateTime                @db.Date
  created_at            DateTime                @default(now()) @db.Timestamptz(0)
  tb_balance            tb_balance[]
  tb_balance_adjustment tb_balance_adjustment[]
  tb_jwt_token          tb_jwt_token[]
  tb_leave              tb_leave[]
  tb_leave_log          tb_leave_log[]
}

model tb_balance_adjustment {
  id_adjustment    String     @id @default(uuid()) @db.VarChar(50)
  NIK              String     @db.VarChar(16)
  adjustment_value Int        @db.SmallInt
  notes            String
  created_at       DateTime   @default(now()) @db.Timestamptz(0)
  actor            String     @db.VarChar(50)
  tb_users         tb_users   @relation(fields: [NIK], references: [NIK], onDelete: NoAction, onUpdate: NoAction, map: "NIK")
  balance_year     Int
  tb_balance       tb_balance @relation(fields: [id_balance], references: [id_balance], onDelete: NoAction, onUpdate: NoAction, map: "id_balance")
  id_balance       String
}

model tb_leave_log {
  id_log         String   @id @default(uuid()) @db.VarChar(50)
  old_status     status
  new_status     status
  reason         String
  changed_at     DateTime @default(now()) @db.Timestamptz(0)
  changed_by_nik String   @db.VarChar(16)
  id_leave       String   @db.VarChar(50)
  balances_used  Json     @default("[]")
  tb_users       tb_users @relation(fields: [changed_by_nik], references: [NIK], onDelete: NoAction, onUpdate: NoAction, map: "NIK")
  tb_leave       tb_leave @relation(fields: [id_leave], references: [id_leave], onDelete: NoAction, onUpdate: NoAction, map: "id_leave")
}

model tb_jwt_token {
  access_token String   @id @db.VarChar(500)
  NIK          String   @db.VarChar(16)
  device_id    String   @unique @db.VarChar(255)
  device_info  String   @db.VarChar(255)
  created_at   DateTime @default(now()) @db.Timestamptz(0)
  tb_users     tb_users @relation(fields: [NIK], references: [NIK], onDelete: NoAction, onUpdate: NoAction, map: "NIK")
}

model tb_settings {
  id                       String   @id @default(uuid())
  light_image              String
  light_background         String
  light_foreground         String
  light_card               String
  light_cardForeground     String
  light_primary            String
  light_primaryForeground  String
  light_secondary          String
  light_secondaryForeground String
  dark_image               String
  dark_background          String
  dark_foreground          String
  dark_card                String
  dark_cardForeground      String
  dark_primary             String
  dark_primaryForeground   String
  dark_secondary           String
  dark_secondaryForeground  String
  created_at               DateTime @default(now()) @db.Timestamptz(0)
}

enum applicable_gender {
  m
  f
  mf
}

enum gender {
  male
  female
}

enum leave_type {
  personal_leave  @map("personal leave")
  mandatory_leave @map("mandatory leave")
  special_leave   @map("special leave")
}

enum role {
  karyawan_tetap
  karyawan_kontrak
  magang
  admin
  super_admin
}

enum status {
  pending
  approved
  rejected
  expired
}

enum status_active {
  active
  resign
}
